name: Flutter CI

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Set up Flutter environment
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'

      # Create Firebase Options dynamically from GitHub Secrets
      - name: Create Firebase Options
        run: |
          cat > lib/firebase_options.dart <<EOF
          import 'package:firebase_core/firebase_core.dart';
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;

          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                return FirebaseOptions(
                  apiKey: '${{ secrets.FIREBASE_API_KEY }}',
                  appId: '${{ secrets.FIREBASE_APP_ID }}',
                  messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
                  projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
                  authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
                  storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
                  measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}',
                );
              }
              // Throw error or handle other platforms as necessary
              throw UnsupportedError(
                'DefaultFirebaseOptions are not supported for this platform.',
              );
            }
          }
          EOF

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Verifies that the formatting of the code is according to standards
      - name: Verify formatting
        run: dart format --set-exit-if-changed .

      # Runs the analyzer to find any lint issues
      - name: Analyze project source
        run: flutter analyze --fatal-infos

      # Runs tests
      - name: Run tests
        run: flutter test
